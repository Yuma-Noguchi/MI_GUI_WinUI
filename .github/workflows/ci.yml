name: CI

on:
  push:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  detect-gpu:
    runs-on: windows-latest
    outputs:
      gpu-vendor: ${{ steps.gpu-detect.outputs.gpu-vendor }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: GPU Detection
      id: gpu-detect
      shell: pwsh
      run: |
        $gpu = Get-WmiObject Win32_VideoController
        Write-Host "Detected GPU: $($gpu.Name)"
        
        $vendor = "none"
        if ($gpu.Name -match "NVIDIA") {
            $vendor = "nvidia"
        } elseif ($gpu.Name -match "AMD") {
            $vendor = "amd"
        } elseif ($gpu.Name -match "Intel") {
            $vendor = "intel"
        }
        
        Write-Host "Setting GPU vendor to: $vendor"
        "gpu-vendor=$vendor" >> $env:GITHUB_OUTPUT
        
        # Force the job to continue by setting a default vendor
        if ($vendor -eq "none") {
            Write-Host "No GPU detected, forcing nvidia for CI"
            "gpu-vendor=nvidia" >> $env:GITHUB_OUTPUT
        }

  build-and-test:
    needs: detect-gpu
    if: success()
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Install Windows App SDK
      shell: pwsh
      run: |
        Write-Host "Installing Windows App SDK components..."
        
        # Install only the necessary WinUI components
        dotnet workload install microsoft-windowsdesktop-sdk-net
        dotnet workload install microsoft-windowsdesktop-runtime-8.0.100-winui
        
        # Verify installation
        Write-Host "Installed workloads:"
        dotnet workload list
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Echo GPU Vendor
      run: |
        Write-Host "Detected GPU vendor: ${{ needs.detect-gpu.outputs.gpu-vendor }}"
          
    - name: Restore
      run: |
        nuget restore MI_GUI_WinUI.sln
        dotnet restore MI_GUI_WinUI.Tests/MI_GUI_WinUI.Tests.csproj -v detailed
      
    - name: Build
      run: |
        # First build the native DirectXAdapterSelector project
        msbuild DirectXAdapterSelector/DirectXAdapterSelector.vcxproj /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}
        
        # Then build the main solution
        msbuild MI_GUI_WinUI.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}
      
    - name: Run GPU Tests
      if: success()
      timeout-minutes: 30
      run: |
        dotnet test MI_GUI_WinUI.Tests/MI_GUI_WinUI.Tests.csproj `
          --filter "TestCategory=RequiresGpu" `
          --configuration ${{ matrix.configuration }} `
          --no-build `
          --verbosity detailed `
          --logger "trx;LogFileName=gpu-tests.trx" `
          --collect:"XPlat Code Coverage"
      env:
        GPU_VENDOR: ${{ needs.detect-gpu.outputs.gpu-vendor }}

    - name: Run Performance Tests
      if: success()
      run: |
        dotnet test MI_GUI_WinUI.Tests/MI_GUI_WinUI.Tests.csproj `
          --filter "TestCategory=Performance" `
          --configuration ${{ matrix.configuration }} `
          --no-build `
          --verbosity detailed `
          --logger "trx;LogFileName=performance-tests.trx"
          
    - name: Run Benchmarks
      if: success()
      run: |
        dotnet run --project MI_GUI_WinUI.Tests/MI_GUI_WinUI.Tests.csproj `
          --filter "*Benchmark*" `
          --configuration Release `
          -- --job short --runtimes net8.0

    - name: Upload Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.platform }}
        path: |
          **/TestResults/*.trx
          **/TestResults/**/coverage.cobertura.xml
          **/BenchmarkDotNet.Artifacts/**/*