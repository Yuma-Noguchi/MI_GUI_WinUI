name: CI

on:
  push:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Install Windows App SDK
      shell: pwsh
      run: |
        # Install minimal required packages directly
        nuget install Microsoft.WindowsAppSDK -Version 1.6.250205002 -OutputDirectory packages
        nuget install Microsoft.Windows.SDK.BuildTools -Version 10.0.26100.1742 -OutputDirectory packages

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore
      run: |
        dotnet restore MI_GUI_WinUI.sln
      
    - name: Cache DirectXAdapterSelector build output
      uses: actions/cache@v4
      id: dx-adapter-cache
      with:
        path: |
          x64/${{ matrix.configuration }}/DirectXAdapterSelector.dll
          x64/${{ matrix.configuration }}/DirectXAdapterSelector.pdb
        key: ${{ runner.os }}-dxadapter-${{ matrix.configuration }}-${{ hashFiles('DirectXAdapterSelector/**/*.cpp', 'DirectXAdapterSelector/**/*.h', 'DirectXAdapterSelector/**/*.vcxproj') }}
        restore-keys: |
          ${{ runner.os }}-dxadapter-${{ matrix.configuration }}-

    - name: Build DirectXAdapterSelector
      if: steps.dx-adapter-cache.outputs.cache-hit != 'true'
      run: |
        # Only build if we didn't get a cache hit
        Write-Host "Building DirectXAdapterSelector..."
        msbuild DirectXAdapterSelector/DirectXAdapterSelector.vcxproj /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} /p:OutDir="$(pwd)\x64\${{ matrix.configuration }}\"
        
        # Verify the DLL exists in the expected location
        if (-Not (Test-Path "x64/${{ matrix.configuration }}/DirectXAdapterSelector.dll")) {
          Write-Error "DirectXAdapterSelector.dll was not built to the expected location"
          exit 1
        } else {
          Write-Host "Successfully built DirectXAdapterSelector.dll to expected location"
        }

    - name: Verify DirectXAdapterSelector DLL
      run: |
        # This runs whether we got a cache hit or built it ourselves
        if (-Not (Test-Path "x64/${{ matrix.configuration }}/DirectXAdapterSelector.dll")) {
          Write-Error "DirectXAdapterSelector.dll not found at expected location"
          exit 1
        } else {
          Write-Host "DirectXAdapterSelector.dll available at expected location"
        }

    - name: Build Main Solution
      run: |
        # Then build the main solution
        msbuild MI_GUI_WinUI.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}
      
    - name: Run All Tests
      if: success()
      timeout-minutes: 15
      shell: pwsh
      run: |
        # First, build the test project if it's not already built
        msbuild MI_GUI_WinUI.Tests/MI_GUI_WinUI.Tests.csproj /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}
        
        Write-Host "Running tests using VSTest.Console.exe"
        dotnet test --no-build MI_GUI_WinUI.Tests/MI_GUI_WinUI.Tests.csproj `
            /p:Platform=${{ matrix.platform }} `
            /Configuration ${{ matrix.configuration }} `
            /Logger:"trx;LogFileName=unit-tests.trx" `
            /Diag:test_log.txt

        # If tests had issues, we should still attempt to upload logs
        if (Test-Path "test_log.txt") {
            Write-Host "============= Test Diagnostics Log ============="
            Get-Content "test_log.txt" | Select-Object -Last 100
            Write-Host "============================================="
        }

    - name: Upload Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.platform }}
        path: |
          **/TestResults/*.trx
          **/TestResults/**/coverage.cobertura.xml
          **/BenchmarkDotNet.Artifacts/**/*